diff --git a/Documentation/devicetree/bindings/interrupt-controller/xilinx,intc.txt b/Documentation/devicetree/bindings/interrupt-controller/xilinx,intc.txt
new file mode 100644
index 000000000..03b39f4b1
--- /dev/null
+++ b/Documentation/devicetree/bindings/interrupt-controller/xilinx,intc.txt
@@ -0,0 +1,56 @@
+Xilinx Interrupt Controller
+
+The controller is a soft IP core that is configured at build time for the
+number of interrupts and the type of each interrupt. These details cannot
+be changed at run time.
+
+Required properties:
+
+- compatible : should be "xlnx,xps-intc-1.00.a"
+- reg : Specifies base physical address and size of the registers.
+- interrupt-controller : Identifies the node as an interrupt controller
+- #interrupt-cells : Specifies the number of cells needed to encode an
+		     interrupt source. The value shall be a minimum of 1.
+		     The Xilinx device trees typically use 2 but the 2nd value
+		     is not used.
+- xlnx,kind-of-intr : A 32 bit value specifying the interrupt type for each
+		      possible interrupt (1 = edge, 0 = level). The interrupt
+		      type typically comes in thru the device tree node of
+		      the interrupt generating device, but in this case
+		      the interrupt type is determined by the interrupt
+		      controller based on how it was implemented.
+- xlnx,num-intr-inputs: Specifies the number of interrupts supported
+		        by the specific implementation of the controller (1-32).
+
+Optional properties:
+- interrupt-parent : Specifies an interrupt controller from which it is
+		     chained (cascaded).
+- interrupts : Specifies the interrupt of the parent controller from which
+	       it is chained.
+
+Example:
+
+axi_intc_0: interrupt-controller@41800000 {
+	#interrupt-cells = <2>;
+	compatible = "xlnx,xps-intc-1.00.a";
+	interrupt-controller;
+	reg = <0x41800000 0x10000>;
+	xlnx,kind-of-intr = <0x1>;
+	xlnx,num-intr-inputs = <0x1>;
+};
+
+Chained Example:
+
+The interrupt is chained to hardware interrupt 61 (29 + 32) of the GIC
+for Zynq.
+
+axi_intc_0: interrupt-controller@41800000 {
+	#interrupt-cells = <2>;
+	compatible = "xlnx,xps-intc-1.00.a";
+	interrupt-controller;
+	interrupt-parent = <&ps7_scugic_0>;
+	interrupts = <0 29 4>;
+	reg = <0x41800000 0x10000>;
+	xlnx,kind-of-intr = <0x1>;
+	xlnx,num-intr-inputs = <0x1>;
+};
diff --git a/drivers/irqchip/Kconfig b/drivers/irqchip/Kconfig
index dc062e8c2..9cc589e39 100644
--- a/drivers/irqchip/Kconfig
+++ b/drivers/irqchip/Kconfig
@@ -293,8 +293,19 @@ config XTENSA_MX
 	select GENERIC_IRQ_EFFECTIVE_AFF_MASK
 
 config XILINX_INTC
-	bool
+	bool "Xilinx Interrupt Controller (IP core)"
 	select IRQ_DOMAIN
+	help
+	  Support for the Xilinx Interrupt Controller which can be used
+	  with MicroBlaze and Zynq. It is a secondary chained controller when
+	  used with Zynq.
+
+config IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+	bool "IRQCHIP Xilinx Intc driver module support (experimental)"
+	depends on XILINX_INTC
+	help
+	  Enable support to load irqchip driver as a module as part of DT overlay.
+	  This is currently supported for XIlinx INTC irqchip driver.
 
 config IRQ_CROSSBAR
 	bool
diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
index 04d1b3963..8c94113cc 100644
--- a/drivers/irqchip/irq-gic-v3.c
+++ b/drivers/irqchip/irq-gic-v3.c
@@ -1373,12 +1373,6 @@ static int gic_irq_domain_map(struct irq_domain *d, unsigned int irq,
 
 	switch (__get_intid_range(hw)) {
 	case SGI_RANGE:
-		irq_set_percpu_devid(irq);
-		irq_domain_set_info(d, irq, hw, chip, d->host_data,
-				    handle_percpu_devid_fasteoi_ipi,
-				    NULL, NULL);
-		break;
-
 	case PPI_RANGE:
 	case EPPI_RANGE:
 		irq_set_percpu_devid(irq);
diff --git a/drivers/irqchip/irq-gic.c b/drivers/irqchip/irq-gic.c
index 176f5f064..b78814146 100644
--- a/drivers/irqchip/irq-gic.c
+++ b/drivers/irqchip/irq-gic.c
@@ -821,18 +821,30 @@ static int gic_set_affinity(struct irq_data *d, const struct cpumask *mask_val,
 	return IRQ_SET_MASK_OK_DONE;
 }
 
-static void gic_ipi_send_mask(struct irq_data *d, const struct cpumask *mask)
+void gic_set_cpu(unsigned int cpu, unsigned int irq)
+{
+	struct irq_data *d = irq_get_irq_data(irq);
+	struct cpumask mask;
+
+	cpumask_clear(&mask);
+	cpumask_set_cpu(cpu, &mask);
+	gic_set_affinity(d, &mask, true);
+}
+EXPORT_SYMBOL(gic_set_cpu);
+
+void gic_ipi_send_mask(struct irq_data *d, const struct cpumask *mask)
 {
 	int cpu;
 	unsigned long flags, map = 0;
 
+#if 0
 	if (unlikely(nr_cpu_ids == 1)) {
 		/* Only one CPU? let's do a self-IPI... */
 		writel_relaxed(2 << 24 | d->hwirq,
 			       gic_data_dist_base(&gic_data[0]) + GIC_DIST_SOFTINT);
 		return;
 	}
-
+#endif
 	gic_lock_irqsave(flags);
 
 	/* Convert our logical CPU mask into a physical one. */
@@ -850,6 +862,7 @@ static void gic_ipi_send_mask(struct irq_data *d, const struct cpumask *mask)
 
 	gic_unlock_irqrestore(flags);
 }
+EXPORT_SYMBOL(gic_ipi_send_mask);
 
 static int gic_starting_cpu(unsigned int cpu)
 {
@@ -897,6 +910,7 @@ void gic_send_sgi(unsigned int cpu_id, unsigned int irq)
 	/* this always happens on GIC0 */
 	writel_relaxed((cpu_id << 16) | irq, gic_data_dist_base(&gic_data[0]) + GIC_DIST_SOFTINT);
 }
+EXPORT_SYMBOL(gic_send_sgi);
 
 /*
  * gic_get_cpu_id - get the CPU interface ID for the specified CPU
@@ -1029,13 +1043,7 @@ static int gic_irq_domain_map(struct irq_domain *d, unsigned int irq,
 	struct irq_data *irqd = irq_desc_get_irq_data(irq_to_desc(irq));
 
 	switch (hw) {
-	case 0 ... 15:
-		irq_set_percpu_devid(irq);
-		irq_domain_set_info(d, irq, hw, &gic->chip, d->host_data,
-				    handle_percpu_devid_fasteoi_ipi,
-				    NULL, NULL);
-		break;
-	case 16 ... 31:
+	case 0 ... 31:
 		irq_set_percpu_devid(irq);
 		irq_domain_set_info(d, irq, hw, &gic->chip, d->host_data,
 				    handle_percpu_devid_irq, NULL, NULL);
diff --git a/drivers/irqchip/irq-xilinx-intc.c b/drivers/irqchip/irq-xilinx-intc.c
index 1d3d27330..d2f87e927 100644
--- a/drivers/irqchip/irq-xilinx-intc.c
+++ b/drivers/irqchip/irq-xilinx-intc.c
@@ -18,6 +18,8 @@
 #include <linux/jump_label.h>
 #include <linux/bug.h>
 #include <linux/of_irq.h>
+#include <linux/cpuhotplug.h>
+#include <linux/smp.h>
 
 /* No one else should require these constants, so define them locally here. */
 #define ISR 0x00			/* Interrupt Status Register */
@@ -32,26 +34,34 @@
 #define MER_ME (1<<0)
 #define MER_HIE (1<<1)
 
-static DEFINE_STATIC_KEY_FALSE(xintc_is_be);
-
 struct xintc_irq_chip {
 	void		__iomem *base;
-	struct		irq_domain *root_domain;
+	struct		irq_domain *domain;
 	u32		intr_mask;
-	u32		nr_irq;
+	struct			irq_chip *intc_dev;
+	u32				nr_irq;
+	u32				sw_irq;
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+	int				irq;
+#endif
 };
 
-static struct xintc_irq_chip *primary_intc;
+static DEFINE_STATIC_KEY_FALSE(xintc_is_be);
+
+static DEFINE_PER_CPU(struct xintc_irq_chip, primary_intc);
 
 static void xintc_write(struct xintc_irq_chip *irqc, int reg, u32 data)
 {
+	if (!irqc)
+		irqc = per_cpu_ptr(&primary_intc, smp_processor_id());
+
 	if (static_branch_unlikely(&xintc_is_be))
 		iowrite32be(data, irqc->base + reg);
 	else
 		iowrite32(data, irqc->base + reg);
 }
 
-static u32 xintc_read(struct xintc_irq_chip *irqc, int reg)
+static unsigned int xintc_read(struct xintc_irq_chip *irqc, int reg)
 {
 	if (static_branch_unlikely(&xintc_is_be))
 		return ioread32be(irqc->base + reg);
@@ -59,10 +69,30 @@ static u32 xintc_read(struct xintc_irq_chip *irqc, int reg)
 		return ioread32(irqc->base + reg);
 }
 
+#if defined(CONFIG_SMP) && defined(CONFIG_MICROBLAZE)
+static DEFINE_RAW_SPINLOCK(ipi_lock);
+
+static void send_ipi(unsigned int cpu, unsigned int ipi_number)
+{
+	unsigned long flags;
+	struct xintc_irq_chip *irqc = per_cpu_ptr(&primary_intc, cpu);
+	u32 sw_irq = 1 << (ipi_number + irqc->nr_irq);
+
+	pr_debug("%s: cpu: %u, sends IPI: %d to cpu: %u, sw_irq %x\n",
+		 __func__, smp_processor_id(), ipi_number, cpu, sw_irq);
+
+	raw_spin_lock_irqsave(&ipi_lock, flags);
+
+	xintc_write(irqc, ISR, sw_irq);
+
+	raw_spin_unlock_irqrestore(&ipi_lock, flags);
+}
+#endif
+
 static void intc_enable_or_unmask(struct irq_data *d)
 {
-	struct xintc_irq_chip *irqc = irq_data_get_irq_chip_data(d);
-	unsigned long mask = BIT(d->hwirq);
+	unsigned long mask = 1 << d->hwirq;
+	struct xintc_irq_chip *local_intc = irq_data_get_irq_chip_data(d);
 
 	pr_debug("irq-xilinx: enable_or_unmask: %ld\n", d->hwirq);
 
@@ -71,67 +101,44 @@ static void intc_enable_or_unmask(struct irq_data *d)
 	 * acks the irq before calling the interrupt handler
 	 */
 	if (irqd_is_level_type(d))
-		xintc_write(irqc, IAR, mask);
+		xintc_write(local_intc, IAR, mask);
 
-	xintc_write(irqc, SIE, mask);
+	xintc_write(local_intc, SIE, mask);
 }
 
 static void intc_disable_or_mask(struct irq_data *d)
 {
-	struct xintc_irq_chip *irqc = irq_data_get_irq_chip_data(d);
+	struct xintc_irq_chip *local_intc = irq_data_get_irq_chip_data(d);
 
 	pr_debug("irq-xilinx: disable: %ld\n", d->hwirq);
-	xintc_write(irqc, CIE, BIT(d->hwirq));
+	xintc_write(local_intc, CIE, 1 << d->hwirq);
 }
 
 static void intc_ack(struct irq_data *d)
 {
-	struct xintc_irq_chip *irqc = irq_data_get_irq_chip_data(d);
+	struct xintc_irq_chip *local_intc = irq_data_get_irq_chip_data(d);
 
 	pr_debug("irq-xilinx: ack: %ld\n", d->hwirq);
-	xintc_write(irqc, IAR, BIT(d->hwirq));
+	xintc_write(local_intc, IAR, 1 << d->hwirq);
 }
 
 static void intc_mask_ack(struct irq_data *d)
 {
-	struct xintc_irq_chip *irqc = irq_data_get_irq_chip_data(d);
-	unsigned long mask = BIT(d->hwirq);
+	unsigned long mask = 1 << d->hwirq;
+	struct xintc_irq_chip *local_intc = irq_data_get_irq_chip_data(d);
 
 	pr_debug("irq-xilinx: disable_and_ack: %ld\n", d->hwirq);
-	xintc_write(irqc, CIE, mask);
-	xintc_write(irqc, IAR, mask);
-}
-
-static struct irq_chip intc_dev = {
-	.name = "Xilinx INTC",
-	.irq_unmask = intc_enable_or_unmask,
-	.irq_mask = intc_disable_or_mask,
-	.irq_ack = intc_ack,
-	.irq_mask_ack = intc_mask_ack,
-};
-
-static unsigned int xintc_get_irq_local(struct xintc_irq_chip *irqc)
-{
-	unsigned int irq = 0;
-	u32 hwirq;
-
-	hwirq = xintc_read(irqc, IVR);
-	if (hwirq != -1U)
-		irq = irq_find_mapping(irqc->root_domain, hwirq);
-
-	pr_debug("irq-xilinx: hwirq=%d, irq=%d\n", hwirq, irq);
-
-	return irq;
+	xintc_write(local_intc, CIE, mask);
+	xintc_write(local_intc, IAR, mask);
 }
 
-unsigned int xintc_get_irq(void)
+static unsigned int xintc_get_irq_local(struct xintc_irq_chip *local_intc)
 {
-	unsigned int irq = -1;
-	u32 hwirq;
+	int hwirq, irq = -1;
 
-	hwirq = xintc_read(primary_intc, IVR);
+	hwirq = xintc_read(local_intc, IVR);
 	if (hwirq != -1U)
-		irq = irq_find_mapping(primary_intc->root_domain, hwirq);
+		irq = irq_find_mapping(local_intc->domain, hwirq);
 
 	pr_debug("irq-xilinx: hwirq=%d, irq=%d\n", hwirq, irq);
 
@@ -140,18 +147,50 @@ unsigned int xintc_get_irq(void)
 
 static int xintc_map(struct irq_domain *d, unsigned int irq, irq_hw_number_t hw)
 {
-	struct xintc_irq_chip *irqc = d->host_data;
+	struct xintc_irq_chip *local_intc = d->host_data;
+	u32 edge = local_intc->intr_mask & (1 << hw);
 
-	if (irqc->intr_mask & BIT(hw)) {
-		irq_set_chip_and_handler_name(irq, &intc_dev,
-					      handle_edge_irq, "edge");
+	/*
+	 * Find out which irq_domain this IRQ is assigned to. If it is assigned
+	 * to root domain then do not fill chip_data and set it up in the code
+	 */
+	if (irq_get_default_host() != d)
+		irq_set_chip_data(irq, local_intc);
+	else {
+		local_intc = per_cpu_ptr(&primary_intc, 0);
+		irq_set_chip_data(irq, NULL);
+	}
+
+	if (edge) {
+#if defined(CONFIG_SMP) && defined(CONFIG_MICROBLAZE)
+		irq_set_chip_and_handler_name(irq, local_intc->intc_dev,
+			handle_percpu_irq, "percpu");
+#else
+		irq_set_chip_and_handler_name(irq, local_intc->intc_dev,
+						handle_edge_irq, "edge");
+#endif
 		irq_clear_status_flags(irq, IRQ_LEVEL);
 	} else {
-		irq_set_chip_and_handler_name(irq, &intc_dev,
-					      handle_level_irq, "level");
+#if defined(CONFIG_SMP) && defined(CONFIG_MICROBLAZE)
+		irq_set_chip_and_handler_name(irq, local_intc->intc_dev,
+			handle_percpu_irq, "percpu");
+#else
+		irq_set_chip_and_handler_name(irq, local_intc->intc_dev,
+						handle_level_irq, "level");
+#endif
 		irq_set_status_flags(irq, IRQ_LEVEL);
 	}
-	irq_set_chip_data(irq, irqc);
+
+	/*
+	 * Setup all IRQs to be per CPU because servicing it by different
+	 * cpu is not implemented yet. And for uniprocessor system this flag
+	 * is nop all time time.
+	 */
+	irq_set_status_flags(irq, IRQ_PER_CPU);
+
+	pr_debug("cpu: %u, xintc_map: hwirq=%u, irq=%u, edge=%u\n",
+		 smp_processor_id(), (u32)hw, irq, edge);
+
 	return 0;
 }
 
@@ -160,32 +199,132 @@ static const struct irq_domain_ops xintc_irq_domain_ops = {
 	.map = xintc_map,
 };
 
+static void xil_intc_initial_setup(struct xintc_irq_chip *irqc)
+{
+	int i;
+	u32 mask;
+
+	/*
+	 * Disable all external interrupts until they are
+	 * explicity requested.
+	 */
+	xintc_write(irqc, IER, 0);
+
+	/* Acknowledge any pending interrupts just in case. */
+	xintc_write(irqc, IAR, 0xffffffff);
+
+	/* Turn on the Master Enable. */
+	xintc_write(irqc, MER, MER_HIE | MER_ME);
+	if (!(xintc_read(irqc, MER) & (MER_HIE | MER_ME))) {
+		static_branch_enable(&xintc_is_be);
+		xintc_write(irqc, MER, MER_HIE | MER_ME);
+	}
+
+	/* Enable all SW IRQs */
+	for (i = 0; i < irqc->sw_irq; i++) {
+		mask = 1 << (i + irqc->nr_irq);
+		xintc_write(irqc, IAR, mask);
+		xintc_write(irqc, SIE, mask);
+	}
+}
+
 static void xil_intc_irq_handler(struct irq_desc *desc)
 {
 	struct irq_chip *chip = irq_desc_get_chip(desc);
-	struct xintc_irq_chip *irqc;
+	struct xintc_irq_chip *local_intc =
+		irq_data_get_irq_handler_data(&desc->irq_data);
 	u32 pending;
 
-	irqc = irq_data_get_irq_handler_data(&desc->irq_data);
 	chained_irq_enter(chip, desc);
 	do {
-		pending = xintc_get_irq_local(irqc);
-		if (pending == 0)
+		pending = xintc_get_irq_local(local_intc);
+		if (pending == -1U)
 			break;
 		generic_handle_irq(pending);
 	} while (true);
 	chained_irq_exit(chip, desc);
 }
 
+static int xil_intc_start(unsigned int cpu)
+{
+	struct xintc_irq_chip *irqc = per_cpu_ptr(&primary_intc, cpu);
+
+	pr_debug("%s: intc cpu %d\n", __func__, cpu);
+
+	xil_intc_initial_setup(irqc);
+
+	return 0;
+}
+
+static int xil_intc_stop(unsigned int cpu)
+{
+	pr_debug("%s: intc cpu %d\n", __func__, cpu);
+
+	return 0;
+}
+
+static void xil_intc_handle_irq(struct pt_regs *regs)
+{
+	int ret;
+	unsigned int hwirq, cpu_id = smp_processor_id();
+	struct xintc_irq_chip *irqc = per_cpu_ptr(&primary_intc, cpu_id);
+
+	do {
+		hwirq = xintc_read(irqc, IVR);
+		if (hwirq != -1U) {
+			if (hwirq >= irqc->nr_irq) {
+#if defined(CONFIG_SMP) && defined(CONFIG_MICROBLAZE)
+				handle_IPI(hwirq - irqc->nr_irq, regs);
+#else
+				WARN_ONCE(1, "SW interrupt not handled\n");
+#endif
+				/* ACK is necessary */
+				xintc_write(irqc, IAR, 1 << hwirq);
+				continue;
+			} else {
+				ret = handle_domain_irq(irqc->domain,
+							hwirq, regs);
+				WARN_ONCE(ret, "cpu %d: Unhandled HWIRQ %d\n",
+					  cpu_id, hwirq);
+				continue;
+			}
+		}
+
+		break;
+	} while (1);
+}
+
+#ifndef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
 static int __init xilinx_intc_of_init(struct device_node *intc,
 					     struct device_node *parent)
+#else
+static int xilinx_intc_of_init(struct device_node *intc,
+			       struct device_node *parent)
+#endif
 {
-	struct xintc_irq_chip *irqc;
 	int ret, irq;
+	struct xintc_irq_chip *irqc;
+	struct irq_chip *intc_dev;
+	u32 cpu_id = 0;
+
+	ret = of_property_read_u32(intc, "cpu-id", &cpu_id);
+	if (ret < 0)
+		pr_debug("%s: %pOF: cpu_id not found\n", __func__, intc);
+
+	/* No parent means it is primary intc */
+	if (!parent) {
+		irqc = per_cpu_ptr(&primary_intc, cpu_id);
+		if (irqc->base) {
+			pr_err("%pOF: %s: cpu %d has already irq controller\n",
+				intc, __func__, cpu_id);
+			return -EINVAL;
+		}
+	} else {
+		irqc = kzalloc(sizeof(*irqc), GFP_KERNEL);
+		if (!irqc)
+			return -ENOMEM;
+	}
 
-	irqc = kzalloc(sizeof(*irqc), GFP_KERNEL);
-	if (!irqc)
-		return -ENOMEM;
 	irqc->base = of_iomap(intc, 0);
 	BUG_ON(!irqc->base);
 
@@ -204,36 +343,45 @@ static int __init xilinx_intc_of_init(struct device_node *intc,
 	if (irqc->intr_mask >> irqc->nr_irq)
 		pr_warn("irq-xilinx: mismatch in kind-of-intr param\n");
 
-	pr_info("irq-xilinx: %pOF: num_irq=%d, edge=0x%x\n",
-		intc, irqc->nr_irq, irqc->intr_mask);
+	/* sw irqs are optinal */
+	of_property_read_u32(intc, "xlnx,num-sw-intr", &irqc->sw_irq);
 
+	pr_info("irq-xilinx: %pOF: num_irq=%d, sw_irq=%d, edge=0x%x\n",
+		intc, irqc->nr_irq, irqc->sw_irq, irqc->intr_mask);
 
-	/*
-	 * Disable all external interrupts until they are
-	 * explicity requested.
-	 */
-	xintc_write(irqc, IER, 0);
-
-	/* Acknowledge any pending interrupts just in case. */
-	xintc_write(irqc, IAR, 0xffffffff);
+	/* Right now enable only SW IRQs on that IP and wait */
+	if (cpu_id) {
+		xil_intc_initial_setup(irqc);
+		return 0;
+	}
 
-	/* Turn on the Master Enable. */
-	xintc_write(irqc, MER, MER_HIE | MER_ME);
-	if (xintc_read(irqc, MER) != (MER_HIE | MER_ME)) {
-		static_branch_enable(&xintc_is_be);
-		xintc_write(irqc, MER, MER_HIE | MER_ME);
+	intc_dev = kzalloc(sizeof(*intc_dev), GFP_KERNEL);
+	if (!intc_dev) {
+		ret = -ENOMEM;
+		goto error;
 	}
 
-	irqc->root_domain = irq_domain_add_linear(intc, irqc->nr_irq,
+	intc_dev->name = intc->full_name;
+	intc_dev->irq_unmask = intc_enable_or_unmask,
+	intc_dev->irq_mask = intc_disable_or_mask,
+	intc_dev->irq_ack = intc_ack,
+	intc_dev->irq_mask_ack = intc_mask_ack,
+	irqc->intc_dev = intc_dev;
+
+	irqc->domain = irq_domain_add_linear(intc, irqc->nr_irq,
 						  &xintc_irq_domain_ops, irqc);
-	if (!irqc->root_domain) {
+	if (!irqc->domain) {
 		pr_err("irq-xilinx: Unable to create IRQ domain\n");
 		ret = -EINVAL;
-		goto error;
+		goto err_alloc;
 	}
 
 	if (parent) {
 		irq = irq_of_parse_and_map(intc, 0);
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+		irqc->irq = irq;
+		intc->data = irqc;
+#endif
 		if (irq) {
 			irq_set_chained_handler_and_data(irq,
 							 xil_intc_irq_handler,
@@ -241,21 +389,95 @@ static int __init xilinx_intc_of_init(struct device_node *intc,
 		} else {
 			pr_err("irq-xilinx: interrupts property not in DT\n");
 			ret = -EINVAL;
-			goto error;
+			goto err_alloc;
 		}
-	} else {
-		primary_intc = irqc;
-		irq_set_default_host(primary_intc->root_domain);
+		xil_intc_initial_setup(irqc);
+		return 0;
 	}
 
-	return 0;
+	/*
+	 * Set default domain here because for other root intc
+	 * irq_find_mapping() will use irq_default_domain as fallback
+	 */
+	irq_set_default_host(irqc->domain);
+	set_handle_irq(xil_intc_handle_irq);
+
+	ret = cpuhp_setup_state(CPUHP_AP_IRQ_XILINX_STARTING,
+				"microblaze/arch_intc:starting",
+				xil_intc_start, xil_intc_stop);
 
+#if defined(CONFIG_SMP) && defined(CONFIG_MICROBLAZE)
+	set_smp_cross_call(send_ipi);
+#endif
+
+	return ret;
+
+err_alloc:
+	kfree(intc_dev);
 error:
 	iounmap(irqc->base);
-	kfree(irqc);
+	if (parent)
+		kfree(irqc);
 	return ret;
+}
 
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+static int xilinx_intc_of_remove(struct device_node *intc,
+				 struct device_node *parent)
+{
+	int irq;
+	struct xintc_irq_chip *irqc;
+
+	if (!parent)
+		return 0;
+
+	irqc = intc->data;
+	irq = irqc->irq;
+
+	irq_set_chained_handler_and_data(irq, NULL, NULL);
+
+	if (irqc->domain) {
+		unsigned int tempirq;
+		unsigned int i;
+
+		for (i = 0; i < irqc->domain->mapcount; i++) {
+			tempirq = irq_find_mapping(irqc->domain, i);
+			if (tempirq)
+				irq_dispose_mapping(tempirq);
+		}
+		irq_dispose_mapping(irq);
+		irq_domain_remove(irqc->domain);
+	}
+
+	/*
+	 * Disable all external interrupts until they are
+	 * explicity requested.
+	 */
+	xintc_write(irqc, IER, 0);
+	/* Acknowledge any pending interrupts just in case. */
+	xintc_write(irqc, IAR, 0xffffffff);
+	/* Turn off the Master Enable. */
+	xintc_write(irqc, MER, 0x0);
+
+	iounmap(irqc->base);
+	kfree(irqc);
+
+	return 0;
 }
 
+static struct irqc_init_remove_funps intc_funps = {
+	.irqchip_initp = xilinx_intc_of_init,
+	.irqchip_removep = xilinx_intc_of_remove,
+};
+
+IRQCHIP_PLATFORM_DRIVER_BEGIN(xilinx_intc_xps)
+IRQCHIP_MATCH("xlnx,xps-intc-1.00.a", &intc_funps)
+IRQCHIP_PLATFORM_DRIVER_END(xilinx_intc_xps)
+
+IRQCHIP_PLATFORM_DRIVER_BEGIN(xilinx_intc_opb)
+IRQCHIP_MATCH("xlnx,opb-intc-1.00.c", &intc_funps)
+IRQCHIP_PLATFORM_DRIVER_END(xilinx_intc_opb)
+#else
 IRQCHIP_DECLARE(xilinx_intc_xps, "xlnx,xps-intc-1.00.a", xilinx_intc_of_init);
 IRQCHIP_DECLARE(xilinx_intc_opb, "xlnx,opb-intc-1.00.c", xilinx_intc_of_init);
+#endif
diff --git a/drivers/irqchip/irqchip.c b/drivers/irqchip/irqchip.c
index 3570f0a58..81e724f0e 100644
--- a/drivers/irqchip/irqchip.c
+++ b/drivers/irqchip/irqchip.c
@@ -15,6 +15,14 @@
 #include <linux/irqchip.h>
 #include <linux/platform_device.h>
 
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+struct platform_irqchip_instance {
+	of_irq_init_cb_t irq_init_cb;
+	of_irq_remove_cb_t irq_remove_cb;
+	struct device_node *parent_node;
+};
+#endif
+
 /*
  * This special of_device_id is the sentinel at the end of the
  * of_device_id[] array of all irqchips. It is automatically placed at
@@ -32,6 +40,7 @@ void __init irqchip_init(void)
 	acpi_probe_device_table(irqchip);
 }
 
+#ifndef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
 int platform_irqchip_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
@@ -58,3 +67,59 @@ int platform_irqchip_probe(struct platform_device *pdev)
 	return irq_init_cb(np, par_np);
 }
 EXPORT_SYMBOL_GPL(platform_irqchip_probe);
+#else
+int platform_irqchip_probe(struct platform_device *pdev)
+{
+	struct platform_irqchip_instance *irqchip;
+	const struct irqc_init_remove_funps *irqchip_funps;
+	struct device_node *np = pdev->dev.of_node;
+	struct device_node *par_np = of_irq_find_parent(np);
+
+	irqchip = devm_kzalloc(&pdev->dev, sizeof(*irqchip), GFP_KERNEL);
+	if (!irqchip)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, irqchip);
+
+	irqchip_funps = of_device_get_match_data(&pdev->dev);
+	irqchip->irq_init_cb =	irqchip_funps->irqchip_initp;
+	irqchip->irq_remove_cb = irqchip_funps->irqchip_removep;
+	irqchip->parent_node = par_np;
+
+	if (!irqchip->irq_init_cb)
+		return -EINVAL;
+
+	if (par_np == np)
+		par_np = NULL;
+
+	/*
+	 * If there's a parent interrupt controller and  none of the parent irq
+	 * domains have been registered, that means the parent interrupt
+	 * controller has not been initialized yet.  it's not time for this
+	 * interrupt controller to initialize. So, defer probe of this
+	 * interrupt controller. The actual initialization callback of this
+	 * interrupt controller can check for specific domains as necessary.
+	 */
+	if (par_np && !irq_find_matching_host(par_np, DOMAIN_BUS_ANY))
+		return -EPROBE_DEFER;
+
+	return irqchip->irq_init_cb(np, par_np);
+}
+EXPORT_SYMBOL_GPL(platform_irqchip_probe);
+
+int platform_irqchip_remove(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct platform_irqchip_instance *irqchip = platform_get_drvdata(pdev);
+	struct device_node *par_np = irqchip->parent_node;
+
+	if (!irqchip->irq_remove_cb)
+		return -EINVAL;
+
+	if (par_np == np)
+		par_np = NULL;
+
+	return irqchip->irq_remove_cb(np, par_np);
+}
+EXPORT_SYMBOL_GPL(platform_irqchip_remove);
+#endif
diff --git a/include/linux/irq.h b/include/linux/irq.h
index 607bee927..7d270d2aa 100644
--- a/include/linux/irq.h
+++ b/include/linux/irq.h
@@ -1109,6 +1109,21 @@ struct irq_domain_chip_generic {
 	struct irq_chip_generic	*gc[];
 };
 
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+/**
+ * struct irqc_init_remove_funps - Stores function pointers for irqc init
+ * and remove APIs. Used when the irqchip driver is to be used as a module.
+ * @irqchip_initp:	Function pointer for init/entry point of a irqchip driver.
+ * @irqchip_removep:Function pointer for irqchip driver remove function.
+ */
+struct irqc_init_remove_funps {
+	int (*irqchip_initp)(struct device_node *irqc,
+			     struct device_node *parent);
+	int (*irqchip_removep)(struct device_node *irqc,
+			       struct device_node *parent);
+};
+#endif
+
 /* Generic chip callback functions */
 void irq_gc_noop(struct irq_data *d);
 void irq_gc_mask_disable_reg(struct irq_data *d);
@@ -1261,7 +1276,11 @@ int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
  * Returns 0 on success, or -EBUSY if an IRQ handler has already been
  * registered.
  */
+#ifndef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
 int __init set_handle_irq(void (*handle_irq)(struct pt_regs *));
+#else
+int set_handle_irq(void (*handle_irq)(struct pt_regs *));
+#endif
 
 /*
  * Allows interrupt handlers to find the irqchip that's been registered as the
diff --git a/include/linux/irqchip.h b/include/linux/irqchip.h
index 67351aac6..14ff16730 100644
--- a/include/linux/irqchip.h
+++ b/include/linux/irqchip.h
@@ -29,12 +29,16 @@
 #define IRQCHIP_DECLARE(name, compat, fn) OF_DECLARE_2(irqchip, name, compat, fn)
 
 extern int platform_irqchip_probe(struct platform_device *pdev);
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+extern int platform_irqchip_remove(struct platform_device *pdev);
+#endif
 
 #define IRQCHIP_PLATFORM_DRIVER_BEGIN(drv_name) \
 static const struct of_device_id drv_name##_irqchip_match_table[] = {
 
 #define IRQCHIP_MATCH(compat, fn) { .compatible = compat, .data = fn },
 
+#ifndef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
 #define IRQCHIP_PLATFORM_DRIVER_END(drv_name)				\
 	{},								\
 };									\
@@ -49,6 +53,23 @@ static struct platform_driver drv_name##_driver = {		\
 	},								\
 };									\
 builtin_platform_driver(drv_name##_driver)
+#else
+#define IRQCHIP_PLATFORM_DRIVER_END(drv_name)				\
+	{},								\
+};									\
+MODULE_DEVICE_TABLE(of, drv_name##_irqchip_match_table);		\
+static struct platform_driver drv_name##_driver = {		\
+	.probe  = platform_irqchip_probe,				\
+	.remove = platform_irqchip_remove,              \
+	.driver = {							\
+		.name = #drv_name,					\
+		.owner = THIS_MODULE,					\
+		.of_match_table = drv_name##_irqchip_match_table,	\
+		.suppress_bind_attrs = true,				\
+	},								\
+};									\
+builtin_platform_driver(drv_name##_driver)
+#endif
 
 /*
  * This macro must be used by the different irqchip drivers to declare
diff --git a/include/linux/irqchip/arm-gic.h b/include/linux/irqchip/arm-gic.h
index 5686711b0..310d46e2a 100644
--- a/include/linux/irqchip/arm-gic.h
+++ b/include/linux/irqchip/arm-gic.h
@@ -134,6 +134,9 @@ struct gic_chip_data;
 
 void gic_cascade_irq(unsigned int gic_nr, unsigned int irq);
 int gic_cpu_if_down(unsigned int gic_nr);
+void gic_ipi_send_mask(struct irq_data *d, const struct cpumask *mask);
+
+void gic_set_cpu(unsigned int cpu, unsigned int irq);
 void gic_cpu_save(struct gic_chip_data *gic);
 void gic_cpu_restore(struct gic_chip_data *gic);
 void gic_dist_save(struct gic_chip_data *gic);
diff --git a/include/linux/of_irq.h b/include/linux/of_irq.h
index e8b78139f..f016a25ec 100644
--- a/include/linux/of_irq.h
+++ b/include/linux/of_irq.h
@@ -10,7 +10,9 @@
 #include <linux/of.h>
 
 typedef int (*of_irq_init_cb_t)(struct device_node *, struct device_node *);
-
+#ifdef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
+typedef int (*of_irq_remove_cb_t)(struct device_node *, struct device_node *);
+#endif
 /*
  * Workarounds only applied to 32bit powermac machines
  */
diff --git a/kernel/irq/handle.c b/kernel/irq/handle.c
index 762a928e1..328de8571 100644
--- a/kernel/irq/handle.c
+++ b/kernel/irq/handle.c
@@ -218,7 +218,11 @@ irqreturn_t handle_irq_event(struct irq_desc *desc)
 }
 
 #ifdef CONFIG_GENERIC_IRQ_MULTI_HANDLER
+#ifndef CONFIG_IRQCHIP_XILINX_INTC_MODULE_SUPPORT_EXPERIMENTAL
 int __init set_handle_irq(void (*handle_irq)(struct pt_regs *))
+#else
+int set_handle_irq(void (*handle_irq)(struct pt_regs *))
+#endif
 {
 	if (handle_arch_irq)
 		return -EBUSY;
